from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher

from valejnik_bot.custom_filters import ChatTypeFilter
from valejnik_bot.services.auth import Auth, Banned


__all__ = ["register_commands"]


async def admin_banned(message: types.Message, state: FSMContext):
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot

    remaining = Banned.is_ban(message.from_user.username)
    if remaining:
        await bot.send_message(chat_id=message.chat.id,
                               text=f"–¢—ã –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 —á–∞—Å. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–∏–Ω—É—Ç.")
    else:
        await state.reset_state()
        await admin(message, state)


async def start(message: types.Message):
    """ `/start` """
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot

    text = "–®–∞–ª–æ–º –ø–∞—Ä—è! –°–µ–π—á–∞—Å –º—ã –Ω–∞—á–Ω—ë–º –≤–∞–ª–µ–∂–Ω–∏—á–∞—Ç—å –ø–æ –ø–æ–ª–Ω–æ–πüòé\n" \
           "–°–∫–∏–¥—ã–≤–∞–π –º–Ω–µ –º–µ–º–∞—Å–∏–∫–∏, –∞ —É–∂ —è —Ä–∞–∑–±–µ—Ä—É—Å—å —á—Ç–æ —Å –Ω–∏–º–∏ –¥–µ–ª–∞—Ç—åüòâ"
    await bot.send_message(chat_id=message.chat.id,
                           text=text)


async def admin(message: types.Message, state: FSMContext):
    """ `/admin` """
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot

    current_state = await state.get_state()
    if current_state == Auth.settings:
        await bot.send_message(chat_id=message.chat.id,
                               text="–¢—ã —É–∂–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–π, –∏ –º–æ–∂–µ—à—å –≤—Å–µ (/settings).")
        return
    await state.set_state(Auth.check_password.try_1)
    await bot.send_message(chat_id=message.chat.id,
                           text="–ê –Ω—É-–∫–∞ –¥—è–¥—è, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–æ —á—Ç–æ —è —Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å.")


async def exit(message: types.Message, state: FSMContext):
    """ `/exit - –í—ã–π—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ` """
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot

    await state.reset_state()
    await bot.send_message(chat_id=message.chat.id,
                           text="–ï—Å–ª–∏ —á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å—Å—èüòâ")


async def set_timeout(message: types.Message):
    """ `/set_timeout - –í—ã–π—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ` """
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot
    config = dispatcher["config"]

    argument = message.get_args()
    if not argument:
        return await message.reply(text="–ù–µ–æ–±—Ö–æ–¥–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç <timeout>: –ù–∞–ø—Ä–∏–º–µ—Ä: /set_timeout 4")
    if not argument.isdigit():
        return await message.reply(text="–ê—Ä–≥—É–º–µ–Ω—Ç <timeout> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: –ù–∞–ø—Ä–∏–º–µ—Ä: /set_timeout 4")
    config["bot"]["posts"]["time_between_posts"] = argument
    await bot.send_message(chat_id=message.chat.id,
                           text=f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {argument} –º–∏–Ω.")


async def settings(message: types.Message):
    """ `/settings` """
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot

    text = "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n\n" \
           "/set_post_channel <channel_id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n" \
           "/set_moderate_channel <channel_id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n" \
           "/set_timeout <timeout> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª.(—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –º–∏–Ω—É—Ç–∞—Ö)\n\n" \
           "/exit - –í—ã–π—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n"
    await bot.send_message(chat_id=message.chat.id,
                           text=text)


def register_commands(dispatcher):
    dispatcher.register_message_handler(start, ChatTypeFilter("private"), commands=['start'], state="*")
    dispatcher.register_message_handler(admin, ChatTypeFilter("private"), commands=['admin'], state="*")
    dispatcher.register_message_handler(admin_banned, ChatTypeFilter("private"),
                                        state=Auth.check_password.banned, commands=['admin'])
    dispatcher.register_message_handler(exit, ChatTypeFilter("private"),
                                        state=Auth.settings, commands=['exit'])
    dispatcher.register_message_handler(set_timeout, ChatTypeFilter("private"),
                                        state=Auth.settings, commands=['set_timeout'])
    dispatcher.register_message_handler(settings, ChatTypeFilter("private"),
                                        state=Auth.settings, commands=['settings'])


if __name__ == '__main__':
    pass
