# -*- coding: utf-8 -*-
import aioredis
import json
from aiogram import types
from typing import Optional


class BasePoll:

    REDIS_KEY_PREFIX = "polls"
    REDIS_KEY_POLL_NAME = ""

    QUESTION = ""
    OPTIONS = []
    ANSWERS = []
    DISABLE_NOTIFICATION = True
    THRESHOLD_VOTES_TO_STOP = 2
    INDEX_ANSWER_TO_POST = 0  # INDEX OF ANSWER THAT TRIGGER POST MEME ACTION

    def __init__(self, redis_conn: aioredis.Redis):
        self.redis = redis_conn
        if len(self.OPTIONS) != len(self.ANSWERS):
            raise TypeError(f"{self.__class__.__name__}: options and answers length should be equal")

    def redis_generate_key(self, *parts):
        return ':'.join((self.REDIS_KEY_PREFIX, ) + tuple(map(str, parts)))

    async def add_poll(self, poll: types.Message, from_message: types.Message):
        key = self.redis_generate_key(self.REDIS_KEY_POLL_NAME, poll.poll.id)
        await self.redis.hset(key, "poll", poll.as_json())
        await self.redis.hset(key, "from_message", from_message.as_json())

    async def delete_poll(self, poll_id: str):
        key = self.redis_generate_key(self.REDIS_KEY_POLL_NAME, poll_id)
        await self.redis.delete(key)

    async def get_poll(self, poll_id: str) -> Optional[types.Message]:
        key = self.redis_generate_key(self.REDIS_KEY_POLL_NAME, poll_id)
        value = await self.redis.hget(key, "poll")

        if value:
            return types.Message.to_object(json.loads(value))

    async def get_from_message(self, poll_id: str) -> Optional[types.Message]:
        key = self.redis_generate_key(self.REDIS_KEY_POLL_NAME, poll_id)
        value = await self.redis.hget(key, "from_message")

        if value:
            return types.Message.to_object(json.loads(value))

    async def update_poll(self, poll: types.Poll) -> bool:
        key = self.redis_generate_key(self.REDIS_KEY_POLL_NAME, poll.id)
        value = await self.get_poll(key)

        if value:
            value.poll = poll
            await self.redis.set(key, value.as_json())
            return True

        return False


class GroupMemePoll(BasePoll):
    """ Poll which will be sended after any image will be posted in group """

    REDIS_KEY_PREFIX = "polls"
    QUESTION = "–û–ø–∞–Ω–∞... –ù–æ–≤—ã–π –º–µ–º–∞—Å–∏–∫ –ø–æ–¥—ä–µ—Ö–∞–ª! –ê–ø–ø—Ä—É–≤–∏–º?"
    OPTIONS = [
        "–ö–∞–Ω–µ—à.üëç",
        "–ë–∞—è–Ω.üôà",
        "–ù–µ —Å–º–µ—à–Ω–æ–π.ü§Æ",
        "–°–ª–æ–∂–Ω–∞–∞–∞–∞...ü§Ø",
        "–ù–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!ü§¢üëé"
    ]
    ANSWERS = [
        "M–µ–º–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å! –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–±–æ—Ä –≤–∞–ª–µ–∂–Ω–∏–∫–∞.",
        "–ì–æ–¥–Ω–æ, –Ω–æ —É–∂–µ –±–∞—è–Ω.",
        "–ú—ã –æ—á–µ–Ω—å –ø—ã—Ç–∞–ª–∏—Å—å, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–æ—Ä–∞–ª.",
        "–°–æ—Ä–∏, –Ω–æ —á—ë—Ç —Å–ª–æ–∂–Ω–∞–∞–∞–∞–∞...",
        "–°–ª—ã—à—å –ø—ë—Å! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø–∏–∫—á—É!"
    ]
    DISABLE_NOTIFICATION = True
    THRESHOLD_VOTES_TO_STOP = 2
    INDEX_ANSWER_TO_POST = 0


class UsersMemePoll(BasePoll):
    """ Poll which will be sended after any image will be posted in group """
    REDIS_KEY_PREFIX = "polls"
    QUESTION = "–ê—Ö—Ç—É–Ω–≥! –º–µ–º–∞—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
    OPTIONS = [
        "–ê–ø–ø—Ä—É–≤–∏–º.",
        "–ë–∞—è–Ω.",
        "–ù–µ —Å–º–µ—à–Ω–æ–π.",
        "–°–ª–æ–∂–Ω–∞–∞–∞–∞...",
        "–ù–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!",
        "–§–æ—Ç–æ —á–ª–µ–Ω–∞"
    ]
    ANSWERS = [
        "–ì–æ–¥–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –ø–µ—á–∞—Ç—å!",
        "–ì–æ–¥–Ω–æ, –Ω–æ —É–∂–µ –±–∞—è–Ω.",
        "–ú—ã –æ—á–µ–Ω—å –ø—ã—Ç–∞–ª–∏—Å—å, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–æ—Ä–∞–ª.",
        "–°–æ—Ä–∏, –Ω–æ —á—ë—Ç —Å–ª–æ–∂–Ω–∞–∞–∞–∞–∞...",
        "–≠—Ç–æ —á–µ –∑–∞ –∫–æ–ª—Ö–æ–∑?! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø–∏–∫—á—É!",
        "–ù–∞ –ø–∏–∫—á–µ –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Ç–≤–æ–µ–π –º–∞–º–∫–∏."
    ]
    DISABLE_NOTIFICATION = True
    THRESHOLD_VOTES_TO_STOP = 1
    INDEX_ANSWER_TO_POST = 0
